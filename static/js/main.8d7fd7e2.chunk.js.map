{"version":3,"sources":["reducers/actions.ts","utils/identify-square/index.ts","utils/fill-grid/index.ts","utils/create-full-grid/index.ts","utils/shuffle/index.ts","utils/is-in/row/index.ts","utils/is-in/col/index.ts","utils/is-in/square/index.ts","utils/check-grid/index.ts","utils/get-random-index/index.ts","utils/copy-grid/index.ts","global/index.ts","utils/solve-grid/index.ts","utils/remove-numbers/index.ts","utils/compare-arrays/index.ts","reducers/reducer.ts","reducers/index.ts","styles/global.ts","styles/theme.ts","components/styles/content/index.ts","components/styles/title/index.ts","components/styles/card/index.ts","components/styles/button/index.ts","components/grid/styles/index.ts","components/grid/block/styles/index.ts","components/grid/block/index.tsx","components/grid/index.tsx","components/numbers/styles/index.ts","components/numbers/button/index.tsx","components/numbers/index.tsx","components/new-button/index.tsx","core/configure-store/index.ts","index.tsx","reducers/types.ts"],"names":["createGrid","type","types","selectBlock","coords","fillBlock","value","identifySquare","grid","row","col","square","x","push","numbers","fillGrid","i","Math","floor","shuffle","isInRow","isInCol","isInSquare","checkGrid","createFullGrid","array","length","j","random","includes","flat","getRandomIndex","copyGrid","gridCopy","r","c","counter","solveGrid","global","removeNumbers","attempt","backup","compareArrays","arr1","arr2","Array","isArray","initialState","reducer","state","action","solvedGrid","challengeGrid","workingGrid","selectedBlock","alert","createGlobalStyle","theme","css","colors","background","black","blue","lightBlue","white","transition","Content","styled","div","Title","h1","Card","Button","button","Container","Row","active","puzzle","Block","colIndex","rowIndex","useSelector","isActive","isPuzzle","dispatch","useDispatch","data-cy","onClick","Grid","selectedValue","create","useCallback","useEffect","fill","n","useMouseTrap","Children","toArray","map","_","NumberButton","Numbers","NewButton","createNewGrid","window","confirm","configureStore","store","createStore","devToolsEnhancer","ReactDOM","render","document","getElementById","CREATE_GRID","SELECT_BLOCK","FILL_BLOCK"],"mappings":"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","file":"static/js/main.8d7fd7e2.chunk.js","sourcesContent":["import { Action, AnyAction } from 'redux'\r\nimport { BLOCK_CODE, NUMBERS } from 'typings'\r\n\r\nimport * as types from './types'\r\n\r\nexport const createGrid = (): Action => ({ type: types.CREATE_GRID })\r\nexport const selectBlock = (coords: BLOCK_CODE): AnyAction => ({\r\n  coords,\r\n  type: types.SELECT_BLOCK,\r\n})\r\n\r\nexport const fillBlock = (value: NUMBERS, coords: BLOCK_CODE): AnyAction => ({\r\n  coords,\r\n  type: types.FILL_BLOCK,\r\n  value,\r\n})\r\n","import { GRID, SQUARE } from 'typings'\r\n\r\ninterface IInput {\r\n  grid: GRID\r\n  row: number\r\n  col: number\r\n}\r\n\r\nfunction identifySquare({ grid, row, col }: IInput) {\r\n  const square = []\r\n  if (row < 3) {\r\n    if (col < 3) {\r\n      for (let x = 0; x < 3; x++) {\r\n        square.push([grid[x][0], grid[x][1], grid[x][2]])\r\n      }\r\n    } else if (col < 6) {\r\n      for (let x = 0; x < 3; x++) {\r\n        square.push([grid[x][3], grid[x][4], grid[x][5]])\r\n      }\r\n    } else {\r\n      for (let x = 0; x < 3; x++) {\r\n        square.push([grid[x][6], grid[x][7], grid[x][8]])\r\n      }\r\n    }\r\n  } else if (row < 6) {\r\n    if (col < 3) {\r\n      for (let x = 3; x < 6; x++) {\r\n        square.push([grid[x][0], grid[x][1], grid[x][2]])\r\n      }\r\n    } else if (col < 6) {\r\n      for (let x = 3; x < 6; x++) {\r\n        square.push([grid[x][3], grid[x][4], grid[x][5]])\r\n      }\r\n    } else {\r\n      for (let x = 3; x < 6; x++) {\r\n        square.push([grid[x][6], grid[x][7], grid[x][8]])\r\n      }\r\n    }\r\n  } else {\r\n    if (col < 3) {\r\n      for (let x = 6; x < 9; x++) {\r\n        square.push([grid[x][0], grid[x][1], grid[x][2]])\r\n      }\r\n    } else if (col < 6) {\r\n      for (let x = 6; x < 9; x++) {\r\n        square.push([grid[x][3], grid[x][4], grid[x][5]])\r\n      }\r\n    } else {\r\n      for (let x = 6; x < 9; x++) {\r\n        square.push([grid[x][6], grid[x][7], grid[x][8]])\r\n      }\r\n    }\r\n  }\r\n\r\n  return square as SQUARE\r\n}\r\n\r\nexport default identifySquare\r\n","import { GRID, NUMBERS } from 'typings'\r\nimport { shuffle, isInRow, isInCol, checkGrid, isInSquare } from 'utils'\r\nimport identifySquare from 'utils/identify-square'\r\nconst numbers: NUMBERS[] = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\n/**\r\n *\r\n * @param grid A backtracking algo to check all the possible combinations of numbers untill a solution is found\r\n * 9x9 recursive grid\r\n */\r\nfunction fillGrid(grid: GRID) {\r\n  let row = 0\r\n  let col = 0\r\n  for (let i = 0; i < 81; i++) {\r\n    row = Math.floor(i / 9)\r\n    col = i % 9\r\n\r\n    if (grid[row][col] === 0) {\r\n      //do stuff\r\n      //recursive things\r\n      shuffle(numbers)\r\n      for (let value of numbers) {\r\n        //is it not in the grid row\r\n        if (!isInRow({ grid, row, value })) {\r\n          //is it not in the grid column\r\n          if (!isInCol({ grid, col, value })) {\r\n            const square = identifySquare({ grid, row, col })\r\n            if (!isInSquare(square, value)) {\r\n              grid[row][col] = value\r\n              //check if grid is not full, then call fill grid again\r\n              if (checkGrid(grid)) return true\r\n              else if (fillGrid(grid)) return true\r\n            }\r\n          }\r\n        }\r\n      }\r\n      break\r\n    }\r\n  }\r\n\r\n  grid[row][col] = 0\r\n}\r\n\r\nexport default fillGrid\r\n","import { GRID } from 'typings'\r\nimport fillGrid from 'utils/fill-grid'\r\n\r\nfunction createFullGrid(): GRID {\r\n  const grid: GRID = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  ]\r\n\r\n  fillGrid(grid)\r\n  return grid\r\n}\r\n\r\nexport default createFullGrid\r\n","/**\r\n *\r\n * @param array An array shuffling algo by Fisher yates\r\n */\r\nfunction shuffle(array: any[]) {\r\n  for (let i = 0; i < array.length - 1; i++) {\r\n    let j = Math.floor(Math.random() * (i + 1))\r\n    ;[array[i], array[j]] = [array[j], array[i]]\r\n  }\r\n}\r\n\r\nexport default shuffle\r\n","import { GRID, NUMBERS } from 'typings'\r\ninterface IInput {\r\n  grid: GRID\r\n  row: number\r\n  value: NUMBERS\r\n}\r\n\r\nfunction isInRow({ grid, row, value }: IInput) {\r\n  return grid[row].includes(value)\r\n}\r\n\r\nexport default isInRow\r\n","import { GRID, NUMBERS } from 'typings'\r\n\r\ninterface IInput {\r\n  grid: GRID\r\n  col: number\r\n  value: NUMBERS\r\n}\r\n\r\nfunction isInCol({ grid, col, value }: IInput) {\r\n  for (let i = 0; i < 9; i++) {\r\n    if (value === grid[i][col]) return true\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nexport default isInCol\r\n","import { NUMBERS, SQUARE } from 'typings'\r\n\r\nfunction isInSquare(square: SQUARE, value: NUMBERS): boolean {\r\n  return square.flat().includes(value)\r\n}\r\n\r\nexport default isInSquare\r\n","import { GRID } from 'typings'\r\n\r\nfunction checkGrid(grid: GRID) {\r\n  for (let i = 0; i < 9; i++) {\r\n    for (let j = 0; j < 9; j++) {\r\n      if (grid[i][j] === 0) return false\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nexport default checkGrid\r\n","function getRandomIndex() {\r\n  return Math.floor(Math.random() * 9)\r\n}\r\n\r\nexport default getRandomIndex\r\n","import { GRID, INDEX } from 'typings'\r\nfunction copyGrid(grid: GRID): GRID {\r\n  const gridCopy: GRID = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  ]\r\n\r\n  for (let r: INDEX = 0; r < 9; r++) {\r\n    for (let c: INDEX = 0; c < 9; c++) {\r\n      gridCopy[r][c] = grid[r][c]\r\n    }\r\n  }\r\n  return gridCopy\r\n}\r\n\r\nexport default copyGrid\r\n","export default {\r\n  counter: 0,\r\n}\r\n","import { GRID, NUMBERS } from 'typings'\r\nimport global from 'global'\r\nimport {\r\n  shuffle,\r\n  checkGrid,\r\n  identifySquare,\r\n  isInCol,\r\n  isInRow,\r\n  isInSquare,\r\n} from 'utils'\r\nconst numbers: NUMBERS[] = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nfunction solveGrid(grid: GRID) {\r\n  let col = 0,\r\n    row = 0\r\n\r\n  for (let i = 0; i < 81; i++) {\r\n    row = Math.floor(i / 9)\r\n    col = i % 9\r\n\r\n    if (grid[row][col] === 0) {\r\n      shuffle(numbers)\r\n      for (let value of numbers)\r\n        if (!isInRow({ grid, row, value })) {\r\n          if (!isInCol({ grid, value, col })) {\r\n            const square = identifySquare({ grid, row, col })\r\n            if (!isInSquare(square, value)) {\r\n              grid[row][col] = value\r\n\r\n              if (checkGrid(grid)) {\r\n                global.counter++\r\n                break\r\n              } else if (solveGrid(grid)) {\r\n                return true\r\n              }\r\n            }\r\n          }\r\n        }\r\n      break\r\n    }\r\n  }\r\n\r\n  grid[row][col] = 0\r\n}\r\n\r\nexport default solveGrid\r\n","import { GRID } from 'typings'\r\nimport { getRandomIndex, copyGrid } from 'utils'\r\nimport global from 'global'\r\nimport { solveGrid } from 'utils'\r\n/**\r\n * removes numbers from grid to create a sudoku puzzle\r\n * @param grid 9x9 grid\r\n * @param attempt number of attempts to solve\r\n * @returns\r\n */\r\n\r\nfunction removeNumbers(grid: GRID, attempt: number = 5): GRID {\r\n  while (attempt > 0) {\r\n    let row = getRandomIndex(),\r\n      col = getRandomIndex()\r\n    while (grid[row][col] === 0) {\r\n      row = getRandomIndex()\r\n      col = getRandomIndex()\r\n    }\r\n\r\n    const backup = grid[row][col]\r\n\r\n    grid[row][col] = 0\r\n\r\n    const gridCopy = copyGrid(grid)\r\n\r\n    //set a global counter\r\n    global.counter = 0\r\n    solveGrid(gridCopy)\r\n\r\n    if (global.counter !== 1) {\r\n      grid[row][col] = backup\r\n      attempt--\r\n    }\r\n  }\r\n  return grid\r\n}\r\n\r\nexport default removeNumbers\r\n","/**\r\n * compare arrays of any dimensions\r\n * @param arr1\r\n * @param arr2\r\n * @returns\r\n */\r\n\r\nfunction compareArrays(arr1: any[], arr2: any[]): boolean {\r\n  if (!Array.isArray(arr1) && !Array.isArray(arr2)) return arr1 === arr2\r\n  if (arr1.length !== arr2.length) return false\r\n  for (let i = 0; i < arr1.length; i++) {\r\n    if (!compareArrays(arr1[i], arr2[i])) return false\r\n  }\r\n  return true\r\n}\r\n\r\nexport default compareArrays\r\n","import { IReducer } from './interfaces'\r\nimport { AnyAction } from 'redux'\r\nimport * as types from './types'\r\nimport { compareArrays, copyGrid, createFullGrid, removeNumbers } from 'utils'\r\nimport { GRID } from 'typings'\r\n\r\nconst initialState: IReducer = {}\r\nfunction reducer(state = initialState, action: AnyAction): IReducer {\r\n  switch (action.type) {\r\n    case types.CREATE_GRID: {\r\n      const solvedGrid = createFullGrid()\r\n      const gridCopy = copyGrid(solvedGrid)\r\n      const challengeGrid = removeNumbers(gridCopy)\r\n      const workingGrid = copyGrid(challengeGrid)\r\n      return {\r\n        ...state,\r\n        challengeGrid,\r\n        solvedGrid,\r\n        workingGrid,\r\n      }\r\n    }\r\n    case types.SELECT_BLOCK: {\r\n      return {\r\n        ...state,\r\n        selectedBlock: action.coords,\r\n      }\r\n    }\r\n    case types.FILL_BLOCK: {\r\n      if (state.workingGrid && state.solvedGrid) {\r\n        if (\r\n          state.solvedGrid[action.coords[0]][action.coords[1]] !== action.value\r\n        ) {\r\n          alert('Incorrect Option!')\r\n          return state\r\n        }\r\n\r\n        state.workingGrid[action.coords[0]][action.coords[1]] =\r\n          state.solvedGrid[action.coords[0]][action.coords[1]]\r\n\r\n        if (compareArrays(state.workingGrid, state.solvedGrid)) {\r\n          alert('completed!')\r\n          return {\r\n            ...state,\r\n            workingGrid: [...state.workingGrid] as GRID,\r\n          }\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        selectedBlock: action.coords,\r\n      }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default reducer\r\n","import reducer from './reducer'\r\n\r\nexport type IReducer = ReturnType<typeof reducer>\r\nexport * from './actions'\r\nexport * from './interfaces'\r\nexport default reducer\r\n","import { createGlobalStyle, css } from 'styled-components'\r\n\r\nexport default createGlobalStyle`\r\n${({ theme }) => css`\r\n  html {\r\n    height: 100%;\r\n    body {\r\n      display: flex;\r\n      flex-direction: column;\r\n      height: 100%;\r\n      margin: 0;\r\n\r\n      #root {\r\n        background: ${theme.colors.background};\r\n        color: ${theme.colors.black};\r\n        display: flex;\r\n        font-family: sans-serif;\r\n        height: 100%;\r\n        justify-content: center;\r\n        padding: 15px;\r\n      }\r\n    }\r\n  }\r\n`}`\r\n","const theme = {\r\n  colors: {\r\n    background: 'radial-gradient(#282cc4CC, #282c34)',\r\n    black: '#282c34',\r\n    blue: '#a0e9fd',\r\n    lightBlue: '#caf3fe',\r\n    white: 'white',\r\n  },\r\n  transition: '0.3s',\r\n}\r\n\r\nexport default theme\r\n","import styled from 'styled-components'\r\n\r\nexport const Content = styled.div`\r\n  max-width: 500px;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n`\r\n","import styled, { css } from 'styled-components'\r\n\r\nexport const Title = styled.h1`\r\n  ${({ theme }) => css`\r\n    color: ${theme.colors.white};\r\n    text-align: center;\r\n    margin-top: 0;\r\n  `}\r\n`\r\n","import styled, { css } from 'styled-components'\r\n\r\nexport const Card = styled.div`\r\n  ${({ theme }) => css`\r\n    background-color: ${theme.colors.white};\r\n    border-radius: 15px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    max-height: fit-content;\r\n    padding: 15px;\r\n  `}\r\n`\r\n","import styled, { css } from 'styled-components'\r\n\r\nexport const Button = styled.button`\r\n  ${({ theme }) => css`\r\n    align-items: center;\r\n    background-color: ${theme.colors.black};\r\n    border: 2px solid ${theme.colors.black};\r\n    border-radius: 4px;\r\n    color: ${theme.colors.white};\r\n    cursor: pointer;\r\n    display: flex;\r\n    flex: 1;\r\n    font-weight: bold;\r\n    height: 40px;\r\n    justify-content: center;\r\n    margin: 4px 2px;\r\n    min-height: 40px;\r\n    opacity: 0.9;\r\n    padding: 0;\r\n    transition: ${theme.transition};\r\n\r\n    &:focus {\r\n      border-color: ${theme.colors.blue};\r\n      outline: none;\r\n    }\r\n\r\n    &:hover {\r\n      opacity: 0.6;\r\n    }\r\n  `}\r\n`\r\n","import styled, { css } from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 10px 0;\r\n`\r\n\r\nexport const Row = styled.div`\r\n  ${({ theme }) => css`\r\n    display: flex;\r\n    flex-flow: row;\r\n\r\n    &:nth-child(1) {\r\n      div {\r\n        border-top: solid 4px ${theme.colors.black};\r\n      }\r\n    }\r\n    &:nth-child(3),\r\n    &:nth-child(6) {\r\n      div {\r\n        border-bottom: solid 3px ${theme.colors.black};\r\n      }\r\n    }\r\n\r\n    &:nth-child(9) {\r\n      div {\r\n        border-bottom: solid 4px ${theme.colors.black};\r\n      }\r\n    }\r\n\r\n    div {\r\n      &:nth-child(1) {\r\n        border-left: solid 4px ${theme.colors.black};\r\n      }\r\n\r\n      &:nth-child(3),\r\n      &:nth-child(6),\r\n      &:nth-child(9) {\r\n        border-right: solid 3px ${theme.colors.black};\r\n      }\r\n\r\n      &:nth-child(4),\r\n      &:nth-child(7) {\r\n        border-left: none;\r\n      }\r\n    }\r\n  `}\r\n`\r\n","import styled, { css } from 'styled-components'\r\n\r\ninterface IProps {\r\n  active?: boolean\r\n  puzzle?: boolean\r\n}\r\n\r\nexport const Container = styled.div<IProps>`\r\n  ${({ active, theme, puzzle }) => css`\r\n    align-items: center;\r\n    background-color: ${active ? theme.colors.blue : theme.colors.white};\r\n    border: 1px solid ${theme.colors.black};\r\n    display: flex;\r\n    flex-grow: 1;\r\n    flex-shrink: 0;\r\n    flex-basis: 0;\r\n    font-weight: ${puzzle ? 'bold' : 'normal'};\r\n    font-size: 20px;\r\n    height: auto;\r\n    justify-content: center;\r\n    transition: ${theme.transition};\r\n    user-select: none;\r\n\r\n    &::before {\r\n      padding-top: 100%;\r\n      content: '';\r\n      float: left;\r\n    }\r\n\r\n    &:hover {\r\n      background-color: ${theme.colors.lightBlue};\r\n    }\r\n  `}\r\n`\r\n","import React, { FC } from 'react'\r\nimport { Container } from './styles'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Dispatch, AnyAction } from 'redux'\r\nimport { IReducer, selectBlock } from 'reducers'\r\nimport { INDEX, N } from 'typings'\r\n\r\ninterface IProps {\r\n  colIndex: INDEX\r\n  rowIndex: INDEX\r\n}\r\n\r\ninterface IState {\r\n  value: N\r\n  isActive: boolean\r\n  isPuzzle: boolean\r\n}\r\nconst Block: FC<IProps> = ({ colIndex, rowIndex }) => {\r\n  const state = useSelector<IReducer, IState>(\r\n    ({ challengeGrid, workingGrid, selectedBlock }) => ({\r\n      isActive: selectedBlock\r\n        ? selectedBlock[0] === rowIndex && selectedBlock[1] === colIndex\r\n        : false,\r\n      isPuzzle:\r\n        challengeGrid && challengeGrid[rowIndex][colIndex] !== 0 ? true : false,\r\n      value: workingGrid ? workingGrid[rowIndex][colIndex] : 0,\r\n    })\r\n  )\r\n\r\n  const dispatch = useDispatch<Dispatch<AnyAction>>()\r\n\r\n  function handleClick() {\r\n    if (!state.isActive) dispatch(selectBlock([rowIndex, colIndex]))\r\n  }\r\n\r\n  return (\r\n    <Container\r\n      active={state.isActive}\r\n      data-cy=\"block\"\r\n      onClick={handleClick}\r\n      puzzle={state.isPuzzle}\r\n    >\r\n      {state.value === 0 ? '' : state.value}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Block\r\n","import React, { FC, Children, useCallback, useEffect } from 'react'\r\nimport { Container, Row } from './styles'\r\nimport { AnyAction, Dispatch } from 'redux'\r\nimport useMouseTrap from 'react-hook-mousetrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Block from './block'\r\nimport { createGrid, fillBlock, IReducer, selectBlock } from 'reducers'\r\nimport { BLOCK_CODE, INDEX, N, NUMBERS } from 'typings'\r\n\r\ninterface IState {\r\n  selectedBlock?: BLOCK_CODE\r\n  selectedValue?: N\r\n}\r\n\r\nconst Grid: FC = () => {\r\n  const state = useSelector<IReducer, IState>(\r\n    ({ selectedBlock, workingGrid }) => ({\r\n      selectedBlock,\r\n      selectedValue:\r\n        workingGrid && selectedBlock\r\n          ? workingGrid[selectedBlock[0]][selectedBlock[1]]\r\n          : 0,\r\n    })\r\n  )\r\n  const dispatch = useDispatch<Dispatch<AnyAction>>()\r\n  const create = useCallback(() => dispatch(createGrid()), [dispatch])\r\n\r\n  useEffect(() => {\r\n    create()\r\n  }, [create])\r\n\r\n  function moveDown() {\r\n    if (state.selectedBlock && state.selectedBlock[0] < 8) {\r\n      dispatch(\r\n        selectBlock([\r\n          (state.selectedBlock[0] + 1) as INDEX,\r\n          state.selectedBlock[1],\r\n        ])\r\n      )\r\n    }\r\n  }\r\n\r\n  function moveLeft() {\r\n    if (state.selectedBlock && state.selectedBlock[1] > 0) {\r\n      dispatch(\r\n        selectBlock([\r\n          state.selectedBlock[0],\r\n          (state.selectedBlock[1] - 1) as INDEX,\r\n        ])\r\n      )\r\n    }\r\n  }\r\n\r\n  function moveUp() {\r\n    if (state.selectedBlock && state.selectedBlock[0] > 0) {\r\n      dispatch(\r\n        selectBlock([\r\n          (state.selectedBlock[0] - 1) as INDEX,\r\n          state.selectedBlock[1],\r\n        ])\r\n      )\r\n    }\r\n  }\r\n\r\n  function moveRight() {\r\n    if (state.selectedBlock && state.selectedBlock[1] < 8) {\r\n      dispatch(\r\n        selectBlock([\r\n          state.selectedBlock[0],\r\n          (state.selectedBlock[1] + 1) as INDEX,\r\n        ])\r\n      )\r\n    }\r\n  }\r\n\r\n  const fill = useCallback(\r\n    (n: NUMBERS) => {\r\n      if (state.selectedBlock && state.selectedValue === 0) {\r\n        dispatch(fillBlock(n, state.selectedBlock))\r\n      }\r\n    },\r\n    [dispatch, state.selectedBlock, state.selectedValue]\r\n  )\r\n\r\n  useMouseTrap('1', () => fill(1))\r\n  useMouseTrap('2', () => fill(2))\r\n  useMouseTrap('3', () => fill(3))\r\n  useMouseTrap('4', () => fill(4))\r\n  useMouseTrap('5', () => fill(5))\r\n  useMouseTrap('6', () => fill(6))\r\n  useMouseTrap('7', () => fill(7))\r\n  useMouseTrap('8', () => fill(8))\r\n  useMouseTrap('9', () => fill(9))\r\n\r\n  useMouseTrap('down', moveDown)\r\n  useMouseTrap('left', moveLeft)\r\n  useMouseTrap('right', moveRight)\r\n  useMouseTrap('up', moveUp)\r\n\r\n  return (\r\n    <Container data-cy=\"grid-container\">\r\n      {Children.toArray(\r\n        [...Array(9)].map((_, rowIndex) => (\r\n          <Row data-cy=\"grid-row-container\">\r\n            {Children.toArray(\r\n              [...Array(9)].map((_, colIndex) => (\r\n                <Block\r\n                  colIndex={colIndex as INDEX}\r\n                  rowIndex={rowIndex as INDEX}\r\n                />\r\n              ))\r\n            )}\r\n          </Row>\r\n        ))\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Grid\r\n","import styled from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-flow: row;\r\n`\r\n","import React, { FC, useCallback } from 'react'\r\nimport { Button } from 'components'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AnyAction, Dispatch } from 'redux'\r\nimport { fillBlock, IReducer } from 'reducers'\r\nimport { BLOCK_CODE, N, NUMBERS } from 'typings'\r\n\r\ninterface IProps {\r\n  value: NUMBERS\r\n}\r\n\r\ninterface IState {\r\n  selectedBlock?: BLOCK_CODE\r\n  selectedValue: N\r\n}\r\n\r\nconst NumberButton: FC<IProps> = ({ value }) => {\r\n  const state = useSelector<IReducer, IState>(\r\n    ({ selectedBlock, workingGrid }) => ({\r\n      selectedBlock,\r\n      selectedValue:\r\n        workingGrid && selectedBlock\r\n          ? workingGrid[selectedBlock[0]][selectedBlock[1]]\r\n          : 0,\r\n    })\r\n  )\r\n\r\n  const dispatch = useDispatch<Dispatch<AnyAction>>()\r\n\r\n  const fill = useCallback(() => {\r\n    if (state.selectedBlock && state.selectedValue === 0) {\r\n      dispatch(fillBlock(value, state.selectedBlock))\r\n    }\r\n  }, [dispatch, state.selectedBlock, state.selectedValue, value])\r\n\r\n  return <Button onClick={fill}>{value}</Button>\r\n}\r\n\r\nexport default NumberButton\r\n","import React, { FC } from 'react'\r\nimport { Container } from './styles'\r\nimport { NUMBERS } from 'typings'\r\nimport NumberButton from './button'\r\nconst Numbers: FC = () => (\r\n  <Container>\r\n    {([1, 2, 3, 4, 5, 6, 7, 8, 9] as NUMBERS[]).map((value) => (\r\n      <NumberButton key={value} value={value} />\r\n    ))}\r\n  </Container>\r\n)\r\n\r\nexport default Numbers\r\n","import React, { FC, useCallback } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { Action, Dispatch } from 'redux'\r\n\r\nimport { createGrid } from 'reducers'\r\n\r\nimport { Button } from 'components'\r\n\r\nconst NewButton: FC = () => {\r\n  const dispatch = useDispatch<Dispatch<Action>>()\r\n\r\n  const createNewGrid = useCallback(() => {\r\n    if (window.confirm('Are you sure you want to start a new game!')) {\r\n      dispatch(createGrid())\r\n    }\r\n  }, [dispatch])\r\n\r\n  return <Button onClick={createNewGrid}>New Game!</Button>\r\n}\r\n\r\nexport default NewButton\r\n","import reducer from 'reducers'\r\nimport { createStore } from 'redux'\r\nimport { devToolsEnhancer } from 'redux-devtools-extension'\r\n\r\nfunction configureStore(initialState = {}) {\r\n  const store = createStore(reducer, initialState, devToolsEnhancer({}))\r\n\r\n  return store\r\n}\r\n\r\nexport default configureStore\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { GlobalStyles } from 'styles'\nimport { ThemeProvider } from 'styled-components'\nimport { theme } from 'styles'\nimport { Content, Grid, Title, Card, NewButton, Numbers } from 'components'\nimport { Provider } from 'react-redux'\nimport { configureStore } from 'core'\n\nconst store = configureStore()\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <Provider store={store}>\n      <GlobalStyles />\n      <Content>\n        <Title>Sudoku</Title>\n        <Card>\n          <NewButton />\n          <Grid></Grid>\n          <Numbers />\n        </Card>\n      </Content>\n    </Provider>\n  </ThemeProvider>,\n  document.getElementById('root')\n)\n","export const CREATE_GRID = 'CREATE_GRID'\r\nexport const SELECT_BLOCK = 'SELECT_BLOCK'\r\nexport const FILL_BLOCK = 'FILL_BLOCK'\r\n"],"sourceRoot":""}